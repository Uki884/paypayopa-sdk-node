name: PayPay Node SDK Upload CI Results
on:
  workflow_run:
    workflows: ["Paypay Node SDK CI"]
    types: ["completed"]
jobs:
  upload-codeclimate:
    runs-on: ubuntu-latest
    steps:
    - name: codeclimate before-build
      env: 
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID}}
        GIT_COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
        GIT_BRANCH: ${{ github.event.workflow_run.head_branch }}
      run: |
           curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ./cc-test-reporter
           chmod +x ./cc-test-reporter
           ./cc-test-reporter before-build

    - name: Download coverage from CI run
      uses: actions/github-script@v3.1.0
      with:
        script: |
          const coverageArtifactName = "lcov-14.x";
          var artifacts = await github.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{github.event.workflow_run.id }},
          });
          var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
            return artifact.name == coverageArtifactName;
          })[0];
          if (!matchArtifact) {
            console.error(artifacts);
            throw new Error("did not find expected artifact `" + artifactName + "`");
          }
          var download = await github.actions.downloadArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: matchArtifact.id,
              archive_format: 'zip',
          });
          var fs = require('fs');
          fs.writeFileSync('${{github.workspace}}/coverage-artifact.zip', Buffer.from(download.data));
    - run: unzip -j coverage-artifact.zip lcov.info -d coverage

    - name: Get commit time
      id: get-commit-time
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const sha = "${{github.event.workflow_run.head_sha}}";
          const commit = await github.git.getCommit({owner: context.repo.owner, repo: context.repo.repo, commit_sha: sha});
          return new Date(commit.data.author.date).getTime();

    - name: codeclimate after-build
      env: 
        CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID}}
        GIT_COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
        GIT_BRANCH: ${{ github.event.workflow_run.head_branch }}
        GIT_COMMITTED_AT: $${{ steps.get-commit-time.outputs.result }}
      run: ./cc-test-reporter after-build -t lcov --exit-code 0
